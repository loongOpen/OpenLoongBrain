#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Pose(object):
    """
    Attributes:
     - x
     - y
     - z
     - rol
     - pit
     - yaw
     - cap

    """


    def __init__(self, x=None, y=None, z=None, rol=None, pit=None, yaw=None, cap=None,):
        self.x = x
        self.y = y
        self.z = z
        self.rol = rol
        self.pit = pit
        self.yaw = yaw
        self.cap = cap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.z = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.rol = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.pit = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.yaw = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.cap = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Pose')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 1)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 2)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.DOUBLE, 3)
            oprot.writeDouble(self.z)
            oprot.writeFieldEnd()
        if self.rol is not None:
            oprot.writeFieldBegin('rol', TType.DOUBLE, 4)
            oprot.writeDouble(self.rol)
            oprot.writeFieldEnd()
        if self.pit is not None:
            oprot.writeFieldBegin('pit', TType.DOUBLE, 5)
            oprot.writeDouble(self.pit)
            oprot.writeFieldEnd()
        if self.yaw is not None:
            oprot.writeFieldBegin('yaw', TType.DOUBLE, 6)
            oprot.writeDouble(self.yaw)
            oprot.writeFieldEnd()
        if self.cap is not None:
            oprot.writeFieldBegin('cap', TType.DOUBLE, 7)
            oprot.writeDouble(self.cap)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Joint(object):
    """
    Attributes:
     - q0
     - q1
     - q2
     - q3
     - q4
     - q5
     - q6
     - cap

    """


    def __init__(self, q0=None, q1=None, q2=None, q3=None, q4=None, q5=None, q6=None, cap=None,):
        self.q0 = q0
        self.q1 = q1
        self.q2 = q2
        self.q3 = q3
        self.q4 = q4
        self.q5 = q5
        self.q6 = q6
        self.cap = cap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.q0 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.q1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.q2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.q3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.q4 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.q5 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.q6 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.cap = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Joint')
        if self.q0 is not None:
            oprot.writeFieldBegin('q0', TType.DOUBLE, 1)
            oprot.writeDouble(self.q0)
            oprot.writeFieldEnd()
        if self.q1 is not None:
            oprot.writeFieldBegin('q1', TType.DOUBLE, 2)
            oprot.writeDouble(self.q1)
            oprot.writeFieldEnd()
        if self.q2 is not None:
            oprot.writeFieldBegin('q2', TType.DOUBLE, 3)
            oprot.writeDouble(self.q2)
            oprot.writeFieldEnd()
        if self.q3 is not None:
            oprot.writeFieldBegin('q3', TType.DOUBLE, 4)
            oprot.writeDouble(self.q3)
            oprot.writeFieldEnd()
        if self.q4 is not None:
            oprot.writeFieldBegin('q4', TType.DOUBLE, 5)
            oprot.writeDouble(self.q4)
            oprot.writeFieldEnd()
        if self.q5 is not None:
            oprot.writeFieldBegin('q5', TType.DOUBLE, 6)
            oprot.writeDouble(self.q5)
            oprot.writeFieldEnd()
        if self.q6 is not None:
            oprot.writeFieldBegin('q6', TType.DOUBLE, 7)
            oprot.writeDouble(self.q6)
            oprot.writeFieldEnd()
        if self.cap is not None:
            oprot.writeFieldBegin('cap', TType.DOUBLE, 8)
            oprot.writeDouble(self.cap)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Arm(object):
    """
    Attributes:
     - action_state
     - e_pose
     - joint

    """


    def __init__(self, action_state=None, e_pose=None, joint=None,):
        self.action_state = action_state
        self.e_pose = e_pose
        self.joint = joint

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.action_state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e_pose = Pose()
                    self.e_pose.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.joint = Joint()
                    self.joint.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Arm')
        if self.action_state is not None:
            oprot.writeFieldBegin('action_state', TType.I32, 1)
            oprot.writeI32(self.action_state)
            oprot.writeFieldEnd()
        if self.e_pose is not None:
            oprot.writeFieldBegin('e_pose', TType.STRUCT, 2)
            self.e_pose.write(oprot)
            oprot.writeFieldEnd()
        if self.joint is not None:
            oprot.writeFieldBegin('joint', TType.STRUCT, 3)
            self.joint.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Robot(object):
    """
    Attributes:
     - mode
     - llm_mode
     - arm_l
     - arm_r

    """


    def __init__(self, mode=None, llm_mode=None, arm_l=None, arm_r=None,):
        self.mode = mode
        self.llm_mode = llm_mode
        self.arm_l = arm_l
        self.arm_r = arm_r

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.llm_mode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.arm_l = Arm()
                    self.arm_l.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.arm_r = Arm()
                    self.arm_r.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Robot')
        if self.mode is not None:
            oprot.writeFieldBegin('mode', TType.I32, 1)
            oprot.writeI32(self.mode)
            oprot.writeFieldEnd()
        if self.llm_mode is not None:
            oprot.writeFieldBegin('llm_mode', TType.I32, 2)
            oprot.writeI32(self.llm_mode)
            oprot.writeFieldEnd()
        if self.arm_l is not None:
            oprot.writeFieldBegin('arm_l', TType.STRUCT, 3)
            self.arm_l.write(oprot)
            oprot.writeFieldEnd()
        if self.arm_r is not None:
            oprot.writeFieldBegin('arm_r', TType.STRUCT, 4)
            self.arm_r.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Bounding_box(object):
    """
    Attributes:
     - clss
     - x
     - y
     - width
     - height
     - depth
     - conf

    """


    def __init__(self, clss=None, x=None, y=None, width=None, height=None, depth=None, conf=None,):
        self.clss = clss
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.depth = depth
        self.conf = conf

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.clss = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.x = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.y = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.width = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.height = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.depth = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.conf = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Bounding_box')
        if self.clss is not None:
            oprot.writeFieldBegin('clss', TType.I32, 1)
            oprot.writeI32(self.clss)
            oprot.writeFieldEnd()
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.I32, 2)
            oprot.writeI32(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.I32, 3)
            oprot.writeI32(self.y)
            oprot.writeFieldEnd()
        if self.width is not None:
            oprot.writeFieldBegin('width', TType.I32, 4)
            oprot.writeI32(self.width)
            oprot.writeFieldEnd()
        if self.height is not None:
            oprot.writeFieldBegin('height', TType.I32, 5)
            oprot.writeI32(self.height)
            oprot.writeFieldEnd()
        if self.depth is not None:
            oprot.writeFieldBegin('depth', TType.DOUBLE, 6)
            oprot.writeDouble(self.depth)
            oprot.writeFieldEnd()
        if self.conf is not None:
            oprot.writeFieldBegin('conf', TType.DOUBLE, 7)
            oprot.writeDouble(self.conf)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Obj_info(object):
    """
    Attributes:
     - name
     - id
     - state
     - side
     - pose
     - pose_left
     - pose_left_app
     - pose_left_app_s
     - pose_right
     - pose_right_app
     - pose_right_app_s
     - box

    """


    def __init__(self, name=None, id=None, state=None, side=None, pose=None, pose_left=None, pose_left_app=None, pose_left_app_s=None, pose_right=None, pose_right_app=None, pose_right_app_s=None, box=None,):
        self.name = name
        self.id = id
        self.state = state
        self.side = side
        self.pose = pose
        self.pose_left = pose_left
        self.pose_left_app = pose_left_app
        self.pose_left_app_s = pose_left_app_s
        self.pose_right = pose_right
        self.pose_right_app = pose_right_app
        self.pose_right_app_s = pose_right_app_s
        self.box = box

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.side = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.pose = Pose()
                    self.pose.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.pose_left = Pose()
                    self.pose_left.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.pose_left_app = Pose()
                    self.pose_left_app.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.pose_left_app_s = Pose()
                    self.pose_left_app_s.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.pose_right = Pose()
                    self.pose_right.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.pose_right_app = Pose()
                    self.pose_right_app.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.pose_right_app_s = Pose()
                    self.pose_right_app_s.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.box = Bounding_box()
                    self.box.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Obj_info')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.side is not None:
            oprot.writeFieldBegin('side', TType.I32, 4)
            oprot.writeI32(self.side)
            oprot.writeFieldEnd()
        if self.pose is not None:
            oprot.writeFieldBegin('pose', TType.STRUCT, 5)
            self.pose.write(oprot)
            oprot.writeFieldEnd()
        if self.pose_left is not None:
            oprot.writeFieldBegin('pose_left', TType.STRUCT, 6)
            self.pose_left.write(oprot)
            oprot.writeFieldEnd()
        if self.pose_left_app is not None:
            oprot.writeFieldBegin('pose_left_app', TType.STRUCT, 7)
            self.pose_left_app.write(oprot)
            oprot.writeFieldEnd()
        if self.pose_left_app_s is not None:
            oprot.writeFieldBegin('pose_left_app_s', TType.STRUCT, 8)
            self.pose_left_app_s.write(oprot)
            oprot.writeFieldEnd()
        if self.pose_right is not None:
            oprot.writeFieldBegin('pose_right', TType.STRUCT, 9)
            self.pose_right.write(oprot)
            oprot.writeFieldEnd()
        if self.pose_right_app is not None:
            oprot.writeFieldBegin('pose_right_app', TType.STRUCT, 10)
            self.pose_right_app.write(oprot)
            oprot.writeFieldEnd()
        if self.pose_right_app_s is not None:
            oprot.writeFieldBegin('pose_right_app_s', TType.STRUCT, 11)
            self.pose_right_app_s.write(oprot)
            oprot.writeFieldEnd()
        if self.box is not None:
            oprot.writeFieldBegin('box', TType.STRUCT, 12)
            self.box.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Env(object):
    """
    Attributes:
     - obj_num
     - obj_info

    """


    def __init__(self, obj_num=None, obj_info=None,):
        self.obj_num = obj_num
        self.obj_info = obj_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.obj_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.obj_info = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Obj_info()
                        _elem5.read(iprot)
                        self.obj_info.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Env')
        if self.obj_num is not None:
            oprot.writeFieldBegin('obj_num', TType.I32, 1)
            oprot.writeI32(self.obj_num)
            oprot.writeFieldEnd()
        if self.obj_info is not None:
            oprot.writeFieldBegin('obj_info', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.obj_info))
            for iter6 in self.obj_info:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Pose)
Pose.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'x', None, None, ),  # 1
    (2, TType.DOUBLE, 'y', None, None, ),  # 2
    (3, TType.DOUBLE, 'z', None, None, ),  # 3
    (4, TType.DOUBLE, 'rol', None, None, ),  # 4
    (5, TType.DOUBLE, 'pit', None, None, ),  # 5
    (6, TType.DOUBLE, 'yaw', None, None, ),  # 6
    (7, TType.DOUBLE, 'cap', None, None, ),  # 7
)
all_structs.append(Joint)
Joint.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'q0', None, None, ),  # 1
    (2, TType.DOUBLE, 'q1', None, None, ),  # 2
    (3, TType.DOUBLE, 'q2', None, None, ),  # 3
    (4, TType.DOUBLE, 'q3', None, None, ),  # 4
    (5, TType.DOUBLE, 'q4', None, None, ),  # 5
    (6, TType.DOUBLE, 'q5', None, None, ),  # 6
    (7, TType.DOUBLE, 'q6', None, None, ),  # 7
    (8, TType.DOUBLE, 'cap', None, None, ),  # 8
)
all_structs.append(Arm)
Arm.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'action_state', None, None, ),  # 1
    (2, TType.STRUCT, 'e_pose', [Pose, None], None, ),  # 2
    (3, TType.STRUCT, 'joint', [Joint, None], None, ),  # 3
)
all_structs.append(Robot)
Robot.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'mode', None, None, ),  # 1
    (2, TType.I32, 'llm_mode', None, None, ),  # 2
    (3, TType.STRUCT, 'arm_l', [Arm, None], None, ),  # 3
    (4, TType.STRUCT, 'arm_r', [Arm, None], None, ),  # 4
)
all_structs.append(Bounding_box)
Bounding_box.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'clss', None, None, ),  # 1
    (2, TType.I32, 'x', None, None, ),  # 2
    (3, TType.I32, 'y', None, None, ),  # 3
    (4, TType.I32, 'width', None, None, ),  # 4
    (5, TType.I32, 'height', None, None, ),  # 5
    (6, TType.DOUBLE, 'depth', None, None, ),  # 6
    (7, TType.DOUBLE, 'conf', None, None, ),  # 7
)
all_structs.append(Obj_info)
Obj_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.I32, 'id', None, None, ),  # 2
    (3, TType.I32, 'state', None, None, ),  # 3
    (4, TType.I32, 'side', None, None, ),  # 4
    (5, TType.STRUCT, 'pose', [Pose, None], None, ),  # 5
    (6, TType.STRUCT, 'pose_left', [Pose, None], None, ),  # 6
    (7, TType.STRUCT, 'pose_left_app', [Pose, None], None, ),  # 7
    (8, TType.STRUCT, 'pose_left_app_s', [Pose, None], None, ),  # 8
    (9, TType.STRUCT, 'pose_right', [Pose, None], None, ),  # 9
    (10, TType.STRUCT, 'pose_right_app', [Pose, None], None, ),  # 10
    (11, TType.STRUCT, 'pose_right_app_s', [Pose, None], None, ),  # 11
    (12, TType.STRUCT, 'box', [Bounding_box, None], None, ),  # 12
)
all_structs.append(Env)
Env.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'obj_num', None, None, ),  # 1
    (2, TType.LIST, 'obj_info', (TType.STRUCT, [Obj_info, None], False), None, ),  # 2
)
fix_spec(all_structs)
del all_structs
